/**
 */
package roverml.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import roverml.util.RovermlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RovermlItemProviderAdapterFactory extends RovermlAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RovermlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.System} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemItemProvider systemItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.System}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemAdapter() {
		if (systemItemProvider == null) {
			systemItemProvider = new SystemItemProvider(this);
		}

		return systemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Rover} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoverItemProvider roverItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Rover}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoverAdapter() {
		if (roverItemProvider == null) {
			roverItemProvider = new RoverItemProvider(this);
		}

		return roverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Program} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgramItemProvider programItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Program}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgramAdapter() {
		if (programItemProvider == null) {
			programItemProvider = new ProgramItemProvider(this);
		}

		return programItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorItemProvider sensorItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorAdapter() {
		if (sensorItemProvider == null) {
			sensorItemProvider = new SensorItemProvider(this);
		}

		return sensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Actuator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActuatorItemProvider actuatorItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Actuator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActuatorAdapter() {
		if (actuatorItemProvider == null) {
			actuatorItemProvider = new ActuatorItemProvider(this);
		}

		return actuatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.GPS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GPSItemProvider gpsItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.GPS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGPSAdapter() {
		if (gpsItemProvider == null) {
			gpsItemProvider = new GPSItemProvider(this);
		}

		return gpsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Compass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompassItemProvider compassItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Compass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompassAdapter() {
		if (compassItemProvider == null) {
			compassItemProvider = new CompassItemProvider(this);
		}

		return compassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.DistanceSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistanceSensorItemProvider distanceSensorItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.DistanceSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistanceSensorAdapter() {
		if (distanceSensorItemProvider == null) {
			distanceSensorItemProvider = new DistanceSensorItemProvider(this);
		}

		return distanceSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Motor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotorItemProvider motorItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Motor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMotorAdapter() {
		if (motorItemProvider == null) {
			motorItemProvider = new MotorItemProvider(this);
		}

		return motorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Light} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LightItemProvider lightItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Light}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLightAdapter() {
		if (lightItemProvider == null) {
			lightItemProvider = new LightItemProvider(this);
		}

		return lightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Block} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockItemProvider blockItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Block}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockAdapter() {
		if (blockItemProvider == null) {
			blockItemProvider = new BlockItemProvider(this);
		}

		return blockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Command} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandItemProvider commandItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Command}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandAdapter() {
		if (commandItemProvider == null) {
			commandItemProvider = new CommandItemProvider(this);
		}

		return commandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.SetLightColor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetLightColorItemProvider setLightColorItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.SetLightColor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetLightColorAdapter() {
		if (setLightColorItemProvider == null) {
			setLightColorItemProvider = new SetLightColorItemProvider(this);
		}

		return setLightColorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Wait} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WaitItemProvider waitItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Wait}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWaitAdapter() {
		if (waitItemProvider == null) {
			waitItemProvider = new WaitItemProvider(this);
		}

		return waitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Move} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveItemProvider moveItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Move}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveAdapter() {
		if (moveItemProvider == null) {
			moveItemProvider = new MoveItemProvider(this);
		}

		return moveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Rotate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RotateItemProvider rotateItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Rotate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRotateAdapter() {
		if (rotateItemProvider == null) {
			rotateItemProvider = new RotateItemProvider(this);
		}

		return rotateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Terminate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminateItemProvider terminateItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Terminate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTerminateAdapter() {
		if (terminateItemProvider == null) {
			terminateItemProvider = new TerminateItemProvider(this);
		}

		return terminateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Repeat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepeatItemProvider repeatItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Repeat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepeatAdapter() {
		if (repeatItemProvider == null) {
			repeatItemProvider = new RepeatItemProvider(this);
		}

		return repeatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Triggered} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggeredItemProvider triggeredItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Triggered}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggeredAdapter() {
		if (triggeredItemProvider == null) {
			triggeredItemProvider = new TriggeredItemProvider(this);
		}

		return triggeredItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Regular} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegularItemProvider regularItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Regular}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegularAdapter() {
		if (regularItemProvider == null) {
			regularItemProvider = new RegularItemProvider(this);
		}

		return regularItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.DistanceSensorTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistanceSensorTriggerItemProvider distanceSensorTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.DistanceSensorTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistanceSensorTriggerAdapter() {
		if (distanceSensorTriggerItemProvider == null) {
			distanceSensorTriggerItemProvider = new DistanceSensorTriggerItemProvider(this);
		}

		return distanceSensorTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.CompassTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompassTriggerItemProvider compassTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.CompassTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompassTriggerAdapter() {
		if (compassTriggerItemProvider == null) {
			compassTriggerItemProvider = new CompassTriggerItemProvider(this);
		}

		return compassTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.GPSTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GPSTriggerItemProvider gpsTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.GPSTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGPSTriggerAdapter() {
		if (gpsTriggerItemProvider == null) {
			gpsTriggerItemProvider = new GPSTriggerItemProvider(this);
		}

		return gpsTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Quantity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuantityItemProvider quantityItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Quantity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuantityAdapter() {
		if (quantityItemProvider == null) {
			quantityItemProvider = new QuantityItemProvider(this);
		}

		return quantityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.SingleQuantity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleQuantityItemProvider singleQuantityItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.SingleQuantity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleQuantityAdapter() {
		if (singleQuantityItemProvider == null) {
			singleQuantityItemProvider = new SingleQuantityItemProvider(this);
		}

		return singleQuantityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Position} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PositionItemProvider positionItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Position}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPositionAdapter() {
		if (positionItemProvider == null) {
			positionItemProvider = new PositionItemProvider(this);
		}

		return positionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Time} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeItemProvider timeItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Time}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeAdapter() {
		if (timeItemProvider == null) {
			timeItemProvider = new TimeItemProvider(this);
		}

		return timeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Velocity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VelocityItemProvider velocityItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Velocity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVelocityAdapter() {
		if (velocityItemProvider == null) {
			velocityItemProvider = new VelocityItemProvider(this);
		}

		return velocityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Length} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LengthItemProvider lengthItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Length}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLengthAdapter() {
		if (lengthItemProvider == null) {
			lengthItemProvider = new LengthItemProvider(this);
		}

		return lengthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link roverml.Angle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AngleItemProvider angleItemProvider;

	/**
	 * This creates an adapter for a {@link roverml.Angle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAngleAdapter() {
		if (angleItemProvider == null) {
			angleItemProvider = new AngleItemProvider(this);
		}

		return angleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemItemProvider != null)
			systemItemProvider.dispose();
		if (roverItemProvider != null)
			roverItemProvider.dispose();
		if (programItemProvider != null)
			programItemProvider.dispose();
		if (componentItemProvider != null)
			componentItemProvider.dispose();
		if (sensorItemProvider != null)
			sensorItemProvider.dispose();
		if (actuatorItemProvider != null)
			actuatorItemProvider.dispose();
		if (gpsItemProvider != null)
			gpsItemProvider.dispose();
		if (compassItemProvider != null)
			compassItemProvider.dispose();
		if (distanceSensorItemProvider != null)
			distanceSensorItemProvider.dispose();
		if (motorItemProvider != null)
			motorItemProvider.dispose();
		if (lightItemProvider != null)
			lightItemProvider.dispose();
		if (blockItemProvider != null)
			blockItemProvider.dispose();
		if (commandItemProvider != null)
			commandItemProvider.dispose();
		if (transitionItemProvider != null)
			transitionItemProvider.dispose();
		if (setLightColorItemProvider != null)
			setLightColorItemProvider.dispose();
		if (waitItemProvider != null)
			waitItemProvider.dispose();
		if (moveItemProvider != null)
			moveItemProvider.dispose();
		if (rotateItemProvider != null)
			rotateItemProvider.dispose();
		if (terminateItemProvider != null)
			terminateItemProvider.dispose();
		if (repeatItemProvider != null)
			repeatItemProvider.dispose();
		if (triggeredItemProvider != null)
			triggeredItemProvider.dispose();
		if (regularItemProvider != null)
			regularItemProvider.dispose();
		if (distanceSensorTriggerItemProvider != null)
			distanceSensorTriggerItemProvider.dispose();
		if (compassTriggerItemProvider != null)
			compassTriggerItemProvider.dispose();
		if (gpsTriggerItemProvider != null)
			gpsTriggerItemProvider.dispose();
		if (quantityItemProvider != null)
			quantityItemProvider.dispose();
		if (singleQuantityItemProvider != null)
			singleQuantityItemProvider.dispose();
		if (positionItemProvider != null)
			positionItemProvider.dispose();
		if (timeItemProvider != null)
			timeItemProvider.dispose();
		if (velocityItemProvider != null)
			velocityItemProvider.dispose();
		if (lengthItemProvider != null)
			lengthItemProvider.dispose();
		if (angleItemProvider != null)
			angleItemProvider.dispose();
	}

}
